/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { Trackr, TrackrInterface } from "../Trackr";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_goodsId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_reason",
        type: "string",
      },
    ],
    name: "ItemChangeHands",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_userAddress",
        type: "address",
      },
    ],
    name: "getUser",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "exist",
            type: "bool",
          },
          {
            internalType: "string",
            name: "display_name",
            type: "string",
          },
          {
            internalType: "enum Identity.USER_TYPE",
            name: "user_type",
            type: "uint8",
          },
        ],
        internalType: "struct Identity.User",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_displayName",
        type: "string",
      },
    ],
    name: "registerAsCustomer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_displayName",
        type: "string",
      },
    ],
    name: "registerAsManufacturer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_goodsId",
        type: "uint256",
      },
    ],
    name: "getGoods",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "exist",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "locked",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "displayName",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "currentCustody",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "custodyList",
            type: "address[]",
          },
        ],
        internalType: "struct Trackr.Goods",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getUserGoodsList",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getUserCustodyList",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_displayName",
        type: "string",
      },
      {
        internalType: "address",
        name: "_goodsOwner",
        type: "address",
      },
    ],
    name: "createGood",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_goodsId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "moveCustody",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_goodsId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_lockStatus",
        type: "bool",
      },
    ],
    name: "lockGoods",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class Trackr__factory {
  static readonly abi = _abi;
  static createInterface(): TrackrInterface {
    return new utils.Interface(_abi) as TrackrInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Trackr {
    return new Contract(address, _abi, signerOrProvider) as Trackr;
  }
}
