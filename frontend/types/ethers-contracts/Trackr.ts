/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type UserStruct = {
  exist: boolean;
  display_name: string;
  user_type: BigNumberish;
};

export type UserStructOutput = [boolean, string, number] & {
  exist: boolean;
  display_name: string;
  user_type: number;
};

export type GoodsStruct = {
  exist: boolean;
  locked: boolean;
  id: BigNumberish;
  displayName: string;
  owner: string;
  currentCustody: string;
  custodyList: string[];
};

export type GoodsStructOutput = [
  boolean,
  boolean,
  BigNumber,
  string,
  string,
  string,
  string[]
] & {
  exist: boolean;
  locked: boolean;
  id: BigNumber;
  displayName: string;
  owner: string;
  currentCustody: string;
  custodyList: string[];
};

export interface TrackrInterface extends utils.Interface {
  functions: {
    "getUser(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerAsCustomer(string)": FunctionFragment;
    "registerAsManufacturer(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "getGoods(uint256)": FunctionFragment;
    "getUserGoodsList()": FunctionFragment;
    "getUserCustodyList()": FunctionFragment;
    "createGood(string,address)": FunctionFragment;
    "moveCustody(uint256,address)": FunctionFragment;
    "lockGoods(uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAsCustomer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsManufacturer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoods",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserGoodsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCustodyList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createGood",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "moveCustody",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockGoods",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAsCustomer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsManufacturer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGoods", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserGoodsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCustodyList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGood", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveCustody",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockGoods", data: BytesLike): Result;

  events: {
    "ItemChangeHands(uint256,address,address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemChangeHands"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ItemChangeHandsEvent = TypedEvent<
  [BigNumber, string, string, string],
  { _goodsId: BigNumber; _to: string; _owner: string; _reason: string }
>;

export type ItemChangeHandsEventFilter = TypedEventFilter<ItemChangeHandsEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Trackr extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TrackrInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getUser(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[UserStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerAsCustomer(
      _displayName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAsManufacturer(
      _displayName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGoods(
      _goodsId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[GoodsStructOutput]>;

    getUserGoodsList(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getUserCustodyList(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    createGood(
      _displayName: string,
      _goodsOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moveCustody(
      _goodsId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockGoods(
      _goodsId: BigNumberish,
      _lockStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getUser(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<UserStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerAsCustomer(
    _displayName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAsManufacturer(
    _displayName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGoods(
    _goodsId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<GoodsStructOutput>;

  getUserGoodsList(overrides?: CallOverrides): Promise<BigNumber[]>;

  getUserCustodyList(overrides?: CallOverrides): Promise<BigNumber[]>;

  createGood(
    _displayName: string,
    _goodsOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moveCustody(
    _goodsId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockGoods(
    _goodsId: BigNumberish,
    _lockStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getUser(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<UserStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerAsCustomer(
      _displayName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAsManufacturer(
      _displayName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getGoods(
      _goodsId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<GoodsStructOutput>;

    getUserGoodsList(overrides?: CallOverrides): Promise<BigNumber[]>;

    getUserCustodyList(overrides?: CallOverrides): Promise<BigNumber[]>;

    createGood(
      _displayName: string,
      _goodsOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    moveCustody(
      _goodsId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lockGoods(
      _goodsId: BigNumberish,
      _lockStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ItemChangeHands(uint256,address,address,string)"(
      _goodsId?: BigNumberish | null,
      _to?: string | null,
      _owner?: string | null,
      _reason?: null
    ): ItemChangeHandsEventFilter;
    ItemChangeHands(
      _goodsId?: BigNumberish | null,
      _to?: string | null,
      _owner?: string | null,
      _reason?: null
    ): ItemChangeHandsEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getUser(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerAsCustomer(
      _displayName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAsManufacturer(
      _displayName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGoods(
      _goodsId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserGoodsList(overrides?: CallOverrides): Promise<BigNumber>;

    getUserCustodyList(overrides?: CallOverrides): Promise<BigNumber>;

    createGood(
      _displayName: string,
      _goodsOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moveCustody(
      _goodsId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockGoods(
      _goodsId: BigNumberish,
      _lockStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getUser(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerAsCustomer(
      _displayName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAsManufacturer(
      _displayName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGoods(
      _goodsId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserGoodsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserCustodyList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createGood(
      _displayName: string,
      _goodsOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moveCustody(
      _goodsId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockGoods(
      _goodsId: BigNumberish,
      _lockStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
